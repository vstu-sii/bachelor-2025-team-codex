name: CI/CD - Dev Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  NODE_VERSION: 20

jobs:
  # ==================================================
  # Lint + Test (Frontend & Backend)
  # ==================================================
  lint-and-test:
    name: Lint & Test (${{ matrix.service }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            ${{ matrix.service }}/package-lock.json
            ${{ matrix.service }}/package.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Run Linter (if present)
        run: |
          cd ${{ matrix.service }}
          npm run lint --if-present

      - name: Run Tests (if present)
        run: |
          cd ${{ matrix.service }}
          npm test --if-present

  # ==================================================
  #  Build Docker Images and Push to GHCR
  # ==================================================
  build-docker:
    name: Build & Push Docker (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        include:
          - service: frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.service }}:latest

  # ==================================================
  #  Deploy to Dev Environment (if push to dev/main)
  # ==================================================
  deploy-dev:
    name: Deploy to Dev Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build-docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Compose Deploy
        run: |
          echo "üöÄ Deploying to dev environment..."
          docker compose -f docker-compose.dev.yml up -d

  # ==================================================
  #  Auto PR Checks & Review Comment
  # ==================================================
  pr-auto-review:
    name: PR Quality Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: lint-and-test

    steps:
      - name: Evaluate Lint/Test Results
        run: echo "‚úÖ All checks passed for PR #${{ github.event.pull_request.number }}"

      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: CI/CD Status
          message: |
            üß© **CI/CD Checks Completed**
            - ‚úÖ Linting passed
            - ‚úÖ Tests passed
            - üêã Docker build queued
            - ‚öôÔ∏è Ready for merge if review is approved
